theory Nth
  use import list.List
  use import option.Option
  use import int.Int

  function nth(n:int)(l: list int) : option int = match l with
    | Nil -> None
    | Cons x r -> if n = 1 then Some x else nth (n-1) r
  end
end

theory NthNoOpt

  use export list.List
  use import int.Int

  function nthNoOpt (n: int) (l: list 'a) : 'a

  axiom nth_cons_0: forall x:'a, r:list 'a. nthNoOpt 1 (Cons x r) = x
  axiom nth_cons_n: forall x:'a, r:list 'a, n:int.
    n > 1 -> nthNoOpt n (Cons x r) = nthNoOpt (n-1) r

end

theory HdTlNoOpt
  use export list.List
  use import list.Length
  use import int.Int

  function hd (l: list 'a) : 'a
  function tl (l: list 'a) : list 'a

  axiom hd_cons: forall x:'a, r:list 'a. hd (Cons x r) = x

  axiom tl_cons: forall x:'a, r:list 'a. tl (Cons x r) = r

  (** We need this axiom to ensure the length decreases with the call of tail **)
  axiom tail_size: forall l:list int . length (tl l) = (length l) - 1

end



module HeapModule
(** Standard modules **)
  use import int.Int
  use import list.List
  use import list.Length
  use import list.Permut
  use import list.Append
  use import ref.Ref
  use import bool.Bool
  use import option.Option
  use import int.ComputerDivision
(** Our revision of original modules **)
  use import Nth
  use import NthNoOpt
  use import HdTlNoOpt

  exception Wrong_index

  function left(i : int) : int = i*2
  function right(i : int) : int = i*2+1

  let heap_left_position(i: int) : int
    requires { i > 0}
    ensures { result = left(i)}
    =i * 2
  let heap_right_position(i :int) : int
    requires { i > 0}
    ensures { result =  right(i) }
    =heap_left_position(i) + 1

  let get_children_position(i : int) : (int, int)
    requires { i > 0}
    ensures { result = (left i, right i)}
    =(heap_left_position(i), heap_right_position(i))

  let heap_left(i :int)(h: list int): option int
    requires{i > 0}
    ensures { result = nth (left i) h}
    = nth (heap_left_position i) h

  let heap_right(i :int)(h: list int): option int
    requires{i > 0}
    ensures { result = nth ( right i) h}
    = nth (heap_right_position i) h

  let heap_children(i:int)(h: list int) : (option int, option int)
    requires{i > 0}
    ensures{ result = (nth (left i) h, nth (right i) h)}
    = (heap_left i h, heap_right i h)


  function isNothing(i : option int) : bool=
    match i with
    | None -> True
    | Some _ -> False
    end

  let get(i : option int) : int
    requires { not (isNothing i) }
    =match i with
    | None -> 0
    | Some e -> e
    end

  let rec take(l : list int)(i :int) : list int
  requires { 0 <= i <= length l } (** ensure i < length i **)
  variant { i }
  ensures { i = 0 -> Nil = result /\ i > 0 -> length result = i }
  = if i = 0 then begin
      Nil
    end else begin
      Cons (hd l) (take (tl l) (i-1))
    end

  let rec drop(l : list int)(i :int) : list int
  requires { i < length l /\ i >= 0}
  variant { i }
  ensures { i = 0 -> result = l /\ i > 0 -> (length l) - i = length result }
  = if i = 0 then begin
      l
    end else begin
      (take (tl l) (i-1))
    end

  let swap_helper(i:int)(j:int)(h:list int): list int
    requires { i <= j }
    requires { i <= length h /\ j <= length h}
    ensures { permut (old h) h }
    ensures { nth i (old h) = nth j h /\ nth j (old h) = nth i h }
    ensures { forall k : int . ( 0 <= k <= (length h) /\ not (k = i \/ k = j) ) -> nth k (old h) = nth k h }
    raises { Wrong_index -> forall i: int. i >= (div (length h) 2) }
    (** then we have to say that each element will be equal except the one in i and j *)
    = if (isNothing (nth i h))  then raise Wrong_index
      else if (isNothing (nth j h))  then raise Wrong_index
      else begin
        let start = (take h (i-1)) in
        let middle = (take (drop h i) (j-i-1)) in
        let _end = (drop h j) in
        let aj = (get (nth j h)) in
        let ai = (get (nth i h)) in
          (start ++ (Cons aj Nil) ++ middle ++ (Cons ai Nil) ++ _end)
      end

  let swap(i:int)(j:int)(h:list int):list int
    ensures { permut (old h) h }
    ensures { nth i (old h) = nth j h /\ nth j (old h) = nth i h }
    ensures { forall k : int . ( 0 <= k <= length(h) /\ not (k = i \/ k = j) ) -> nth k (old h) = nth k h }
    = let x = ref 0 in
      let y = ref 0 in
      try
        if i <= j then begin
          x := i; y := j
        end else begin
          x := j; y := i
        end;
        assert{ !x <= !y };
        (swap_helper !x !y h)
      with Wrong_index -> h
      end

    let indexOfMax(i : int)(h:list int): int
    requires { 0 <= i <= length h }
    ensures { 0 <= result <= length h }
    ensures { (nthNoOpt result h >= nthNoOpt i h)
      /\ (nthNoOpt result h >= nthNoOpt (left i) h)
      /\ (nthNoOpt result h >= nthNoOpt (right i) h) }
    = let (l,r) =  heap_children i h    in
      let root = get (nth i h)     in
      if root >= get l && root >= get r then
        i
      else if get l >= get r then
        heap_left_position i
      else
        heap_right_position i

    function isHeap(i : int)(h :list int): bool
    = forall i : int . (0 <= i <= length h) /\ (
      i > (div (length h) 2) -> True
      /\
      i <= (div (length h) 2) ->
        (nthNoOpt i h) >= (nthNoOpt (left i) h) /\ (nthNoOpt i h) >= (nthNoOpt (right i) h)
    )

    let rec heapify (i : int)(h: list int): list int
    requires { i <= length h}
    variant { (length h)-i }
    ensures { isHeap i h }
    = if length h = 0 then
        Nil
      else let m = (indexOfMax i h) in
        if m = i then
          h
        else
          heapify m (swap i m h)

    let rec bh (i : int)(h : list int) : list int
    requires { i > 0 }
    variant { i }
    ensures { forall k : int . i <= k <= (div (length h) 2) -> isHeap k h }
    = if i = 1 then
        heapify 1 h
      else
        bh (i -1) (heapify i h)

    let build_heap (h: list int) : list int
    ensures { forall i : int . 0 <= i <= (div (length h) 2) -> isHeap i h }
    = bh (div (length h) 2) h



end
